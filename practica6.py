# -*- coding: utf-8 -*-
"""Practica6SI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14nGE53tysIELuYRDYykrwI3bdmqIhg-J
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#Importar el dataset
conjuntoDeDatos = pd.read_csv("Churn_Modelling.csv")

X = conjuntoDeDatos.iloc[:,3:13].values

y = conjuntoDeDatos.iloc[:,13].values

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer

ls = ColumnTransformer([('Geography', OneHotEncoder(categories='auto'),[1])], remainder='passthrough')
X = ls.fit_transform(X)

X = X[:,1:]

ls = ColumnTransformer([('Gender', OneHotEncoder(categories='auto'),[3])], remainder = 'passthrough')
X = ls.fit_transform(X)

X = X[:,1:]

#Para dividir el dataset
from sklearn.model_selection import train_test_split
#Recordar que siempre va el 80% de prueba y menos de entrenamiento 20%
#el random puede ir cualquier valor
x_train, x_test, y_train, y_test = train_test_split(X,y,test_size = .20, random_state = 0)

#El escalado
from sklearn.preprocessing import StandardScaler

escaladorEnX = StandardScaler()
x_train = escaladorEnX.fit_transform(x_train)
x_test = escaladorEnX.fit_transform(x_test)

#Evaluar el modelo y calcular las predicciones finales
from keras.models import Sequential
from keras.layers import Dense

#Inicializar la red neuronal
clasificador = Sequential()

#AÃ±adir las capas
#Compilar la red neuronal artificial
clasificador.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

#Capa 1
clasificador.add(Dense(units=6, kernel_initializer = 'uniform', activation = 'relu', input_dim = 11))

#Capa 2
clasificador.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu'))
#Cuantos nodos tiene la capa oculta

#Capa 3 (Capa de salida)
clasificador.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

#Ajustamos la RNA al conjunto de entrenamiento
clasificador.fit(x_train, y_train, batch_size = 10, epochs = 50)
#Si ocupamos muchos epoch puede ocurrir

#Prediccion de los resultados con el conjunto de testing
y_predice = clasificador.predict(x_test)
y_predBooleano = (y_predice>0.5)

#Evaluar el dendimineto con una matriz de confusion
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_predBooleano)